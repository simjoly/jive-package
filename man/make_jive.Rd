% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_jive.R
\name{make_jive}
\alias{make_jive}
\title{Create a list that can be used as an input to mcmc_jive}
\usage{
make_jive(phy, traits, map = NULL, model.var = "OU",
  model.mean = "BM", root.station = F, scale = F, control = list())
}
\arguments{
\item{phy}{phylogenetic tree provided as either a simmap or a phylo object}

\item{traits}{matrix of traits value for every species of phy (see details)}

\item{map}{matrix mapping regimes on every edge of phy (see details)}

\item{model.var}{model specification for trait variance evolution. Supported models are c("OU", "BM", "WN", "OUM", "BMM", "WNM")}

\item{model.mean}{model specification for trait mean evolution. Supported models are c("OU", "BM", "WN", "OUM", "BMM", "WNM")}

\item{root.station}{boolean indicating whether the theta_0 should be dropped from the OU or OUM models}

\item{scale}{boolean indicating whether the tree should be scaled to unit length for the model fitting}

\item{control}{list to control tuning parameters of the MCMC algorithm (see details)}
}
\value{
A jive object to parse into mcmc_jive function
}
\description{
This function creates a jive object from a matrix of intraspecific observations
and species phylogeny. The obtained jive object is a list that can than be used as an input to \code{\link{mcmc_jive}} function
Intraspecific observations should be stored as matrix, where lines are vector of observations for each species,
with NA for no data. Phylogenetic tree can be either a simmap object (\code{\link{make.simmap}}) or phylo object (\code{\link{as.phylo}})
}
\details{
This function creates a jive object needed for \code{\link{mcmc_jive}} function.  
Trait values must be stored as a matrix, where lines are vectors of observations for each species, with NA for no data. Rownames are species names that should match exactly tip labels of the phylogenetic tree.

Phylogenetic tree must be provided as either simmap object or as a phylo object. If the phylogenetic tree is a phylo object but model specification indicates multiple regimes, user must provide a mapping of the regime in map.

map is a matrix giving the mapping of regimes on phy edges. Each row correspond to an edge in phy and each column correspond to a regime. If map is provided the map from the simmap object is ignored.   

variance and mean evolution can be modeled with Ornstein-Uhlenbeck (OU), Brownian Motion (BM) or White Noise (WN) processes. Multiple regimes can be defined for both models and will apply on thetas only for OU (OUM) and on sigmas only for WN (WNM) and BM (BMM)
Species-specific distributions are modeled as multivariate normal distributions

control is a list containig tuning parameters acting at different levels of the MCMC algorithm ($lik for likelihood level, $prior.mean for mean prior level and $prior.var for variance prior level). Inside each level ($lik, $prior.mean, $prior.var), the user can modify the default value of initial parameter value ($pv), initial window size ($ws), proposal methods ($prop) for $lik, $prior.mean and $prior.var and hyperpriors ($hprior) for $prior.mean and $prior.var. 
The \code{\link{control_jive}} function provides an easy way to modify control parameters (see examples)
}
\examples{
library(OUwie)
library(phytools)
library(MASS)

data(treeOU1)
data(traitsOU1)

#VOU and MBM with one regime and without mcmc parameter tuning
my.jive <- make_jive(treeOU1, traitsOU1,  model.var="OU", model.mean="BM")

#VOU and MBM with one regime and with mcmc parameter tuning
# control argument can be built using control_jive
my.control <- list(lik = control_jive("lik", traits = traitsOU1, initial.ws = cbind(apply(traitsOU1, 1, mean, na.rm = T),apply(traitsOU1, 1, sd, na.rm = T))),
                   prior.mean = control_jive("prior.mean", model.evo = "BM", traits = traitsOU1, initial.pv = c(1,2)))
my.jive <- make_jive(treeOU1, traitsOU1,  model.var="OU", model.mean="BM", control = my.control)                   

data(treeOU2)
data(traitsOU2)
data(regimesOU2)

#VOUM and MBM with two regimes using simmap tree
my.jive <- make_jive(treeOU2, traitsOU2,  model.var="OUM", model.mean="BM")

#VOUM and MBM with two regimes using map
my.jive <- make_jive(treeOU2, traitsOU2, map = mapOU2, model.var="OUM", model.mean="BM")
}
\author{
Theo Gaboriau, Anna Kostikova and Simon Joly
}
